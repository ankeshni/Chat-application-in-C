/**
 * @ankeshni_assignment1
 * @author  Ankesh N Bhoi <ankeshni@buffalo.edu>
 * @version 1.0
 *
 * @section LICENSE
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details at
 * http://www.gnu.org/copyleft/gpl.html
 *
 * @section DESCRIPTION
 *
 * This contains the main function. Add further description here....
 */
#include <stdio.h>
#include <stdlib.h>
#include<string.h>

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>



#include "../include/global.h"
#include "../include/logger.h"

//#define SERVER_PORT 5432
#define MAX_LINE 256

//#define SERVER_PORT 4322
#define MAX_PENDING 5
#define MAX_LINE 256

/**
 * main function
 *
 * @param  argc Number of arguments
 * @param  argv The argument list
 i* @return 0 EXIT_SUCCESS
 */

////////////////Shell//////////////////////////////////////////////////////////////////////////////////////////////////////////////




///////////////Client//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void client(char* port )
{
printf ("reached inside client enter connect ip port");

//tokenize input
char* arg;
int argno=0;
char* argument[80];
char* cmd;
fgets(cmd,80,stdin);
arg = strtok(cmd," ");printf ("command read");

while(arg!=NULL)
 { argument[argno]=malloc(100);
 strcpy(argument[argno],arg);
 argno+=1;
 arg=strtok(NULL," ");
 }

printf ("command parsed");
FILE *fp;
struct hostent *hp;
struct sockaddr_in sin;
char *host;
char buf[MAX_LINE];
int s;
int len;

struct in_addr ipv4addr;
strtok(argument[1],"\n");
inet_pton(AF_INET, argument[1], &ipv4addr);


/*
if (argc==2) {
host =*(token+1) ;
}
else {
fprintf(stderr, "usage: simplex-talk host\n");
exit(1);
}
*/

 

/* translate host name into peerâ€™s IP address */
 hp = gethostbyaddr(&ipv4addr,sizeof(ipv4addr),AF_INET);//gethostbyname(host);
if (!hp) {
fprintf(stderr, "simplex-talk: unknown host: %s\n", host);
exit(1);
}


/* build address data structure */
bzero((char *)&sin, sizeof(sin));
sin.sin_family = AF_INET;
bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
sin.sin_port =  htons(port);
/* active open */
if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
perror("simplex-talk: socket");
exit(1);
}
if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
perror("simplex-talk: connect");
close(s);
exit(1);
}
/* main loop: get and send lines of text */
while (fgets(buf, sizeof(buf), stdin)) {
len = strlen(buf) + 1;
send(s, buf, len, 0);
}
}
////////////Server/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void server(char* port )
{
//shell();
struct sockaddr_in sin;
char buf[MAX_LINE];
int len;
int s, new_s;
/* build address data structure */
bzero((char *)&sin, sizeof(sin));
sin.sin_family = AF_INET;
sin.sin_addr.s_addr = INADDR_ANY;
sin.sin_port = htons(port);
/* setup passive open */
if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
perror("simplex-talk: socket");
exit(1);
}
if ((bind(s, (struct sockaddr *)&sin, sizeof(sin))) < 0) {
perror("simplex-talk: bind");
exit(1);
}
listen(s, MAX_PENDING);
/* wait for connection, then receive and print text */
while(1) {
if ((new_s = accept(s, (struct sockaddr *)&sin, &len)) < 0) {
perror("simplex-talk: accept");
exit(1);
}
while (len = recv(new_s, buf, sizeof(buf), 0))
fputs(buf, stdout);
close(new_s);
}

}


//////main/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int main(int argc, char **argv)
{
	/*Init. Logger*/
	cse4589_init_log(argv[2]);

	/*Clear LOGFILE*/
	fclose(fopen(LOGFILE, "w"));

	/*Start Here*/
        /*Creating Socket*/
          
        if(!(strcmp(argv[1], "c") ))
        { // printf("inside first if");
           
     	    
			client(argv[2]);
			
		}
////////////////////////////////////////////////////////////////////////////////////
			
         
     else if(!(strcmp(argv[1], "s") ))
        {
          server(argv[2]);
    	}
	return 0;

} 
